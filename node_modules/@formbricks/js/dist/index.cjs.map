{"version":3,"file":"index.cjs","sources":["../src/lib/load-formbricks.ts","../src/index.ts"],"sourcesContent":["/*\n  eslint-disable no-console --\n  * Required for logging errors\n*/\nimport { type Result } from \"@formbricks/types/error-handlers\";\n\nlet isInitializing = false;\nlet isInitialized = false;\n\n// Load the SDK, return the result\nconst loadFormbricksSDK = async (apiHostParam: string): Promise<Result<void>> => {\n  if (!window.formbricks) {\n    const scriptTag = document.createElement(\"script\");\n    scriptTag.type = \"text/javascript\";\n    scriptTag.src = `${apiHostParam}/js/formbricks.umd.cjs`;\n    scriptTag.async = true;\n\n    const getFormbricks = async (): Promise<void> =>\n      new Promise<void>((resolve, reject) => {\n        const timeoutId = setTimeout(() => {\n          reject(new Error(`Formbricks SDK loading timed out`));\n        }, 10000);\n        scriptTag.onload = () => {\n          clearTimeout(timeoutId);\n          resolve();\n        };\n        scriptTag.onerror = () => {\n          clearTimeout(timeoutId);\n          reject(new Error(`Failed to load Formbricks SDK`));\n        };\n      });\n\n    document.head.appendChild(scriptTag);\n\n    try {\n      await getFormbricks();\n      return { ok: true, data: undefined };\n    } catch (error) {\n      const err = error as { message?: string };\n\n      return {\n        ok: false,\n        error: new Error(err.message ?? `Failed to load Formbricks SDK`),\n      };\n    }\n  }\n\n  return { ok: true, data: undefined };\n};\n\nconst functionsToProcess: { prop: string; args: unknown[] }[] = [];\n\nexport const loadFormbricksToProxy = async (prop: string, ...args: unknown[]): Promise<void> => {\n  // all of this should happen when not initialized:\n  if (!isInitialized) {\n    if (prop === \"init\") {\n      if (isInitializing) {\n        console.warn(\"ðŸ§± Formbricks - Warning: Formbricks is already initializing.\");\n        return;\n      }\n\n      // reset the initialization state\n      isInitializing = true;\n\n      const apiHost = (args[0] as { apiHost: string }).apiHost;\n      const loadSDKResult = await loadFormbricksSDK(apiHost);\n\n      if (loadSDKResult.ok) {\n        if (window.formbricks) {\n          // @ts-expect-error -- Required for dynamic function calls\n          void window.formbricks.init(...args);\n\n          isInitializing = false;\n          isInitialized = true;\n\n          // process the queued functions\n          for (const { prop: functionProp, args: functionArgs } of functionsToProcess) {\n            type FormbricksProp = keyof typeof window.formbricks;\n\n            if (typeof window.formbricks[functionProp as FormbricksProp] !== \"function\") {\n              console.error(`ðŸ§± Formbricks - Error: Method ${functionProp} does not exist on formbricks`);\n              continue;\n            }\n\n            // @ts-expect-error -- Required for dynamic function calls\n            (window.formbricks[functionProp] as unknown)(...functionArgs);\n          }\n        }\n      }\n    } else {\n      console.warn(\n        \"ðŸ§± Formbricks - Warning: Formbricks not initialized. This method will be queued and executed after initialization.\"\n      );\n\n      functionsToProcess.push({ prop, args });\n    }\n  } else if (window.formbricks) {\n    type Formbricks = typeof window.formbricks;\n    type FunctionProp = keyof Formbricks;\n    const functionPropTyped = prop as FunctionProp;\n\n    // @ts-expect-error -- Required for dynamic function calls\n    await window.formbricks[functionPropTyped](...args);\n  }\n};\n","import { type TFormbricksApp } from \"@formbricks/js-core\";\nimport { loadFormbricksToProxy } from \"./lib/load-formbricks\";\n\ndeclare global {\n  interface Window {\n    formbricks: TFormbricksApp | undefined;\n  }\n}\n\nconst formbricksProxyHandler: ProxyHandler<TFormbricksApp> = {\n  get(_target, prop, _receiver) {\n    return (...args: unknown[]) => loadFormbricksToProxy(prop as string, ...args);\n  },\n};\n\nconst formbricksApp: TFormbricksApp = new Proxy({} as TFormbricksApp, formbricksProxyHandler);\n\n// eslint-disable-next-line import/no-default-export -- Required for UMD\nexport default formbricksApp;\n"],"names":["isInitializing","isInitialized","functionsToProcess","loadFormbricksToProxy","async","prop","args","window","formbricks","functionPropTyped","console","warn","apiHost","apiHostParam","scriptTag","document","createElement","type","src","getFormbricks","Promise","resolve","reject","timeoutId","setTimeout","Error","onload","clearTimeout","onerror","head","appendChild","ok","data","error","message","loadFormbricksSDK","init","functionProp","functionArgs","push","formbricksApp","Proxy","get","_target","_receiver"],"mappings":"aAMA,IAAIA,GAAiB,EACjBC,GAAgB,EAGpB,MAwCMC,EAA0D,GAEnDC,EAAwBC,MAAOC,KAAiBC,KAE3D,GAAKL,GAyCH,GACSM,OAAOC,WAAY,CAG5B,MAAMC,EAAoBJ,QAGpBE,OAAOC,WAAWC,MAAsBH,EAChD,OAhDE,GAAa,SAATD,EAAiB,CACnB,GAAIL,EAEF,YADAU,QAAQC,KAAK,gEAKEX,GAAA,EAEX,MAAAY,EAAWN,EAAK,GAA2BM,QAGjD,SAzDoBR,OAAOS,IAC3B,IAACN,OAAOC,WAAY,CAChB,MAAAM,EAAYC,SAASC,cAAc,UACzCF,EAAUG,KAAO,kBACPH,EAAAI,IAAM,GAAGL,0BACnBC,EAAUV,OAAQ,EAElB,MAAMe,EAAgBf,SACpB,IAAIgB,SAAc,CAACC,EAASC,KACpB,MAAAC,EAAYC,YAAW,KACpBF,EAAA,IAAIG,MAAM,oCAAmC,GACnD,KACHX,EAAUY,OAAS,KACjBC,aAAaJ,QAGfT,EAAUc,QAAU,KAClBD,aAAaJ,GACND,EAAA,IAAIG,MAAM,iCAAgC,CAAA,IAI9CV,SAAAc,KAAKC,YAAYhB,GAEtB,IAEF,aADMK,IACC,CAAEY,IAAI,EAAMC,UAAM,SAClBC,GAGA,MAAA,CACLF,IAAI,EACJE,MAAO,IAAIR,MAJDQ,EAIWC,SAAW,iCAEpC,CACF,CAEA,MAAO,CAAEH,IAAI,EAAMC,UAAM,EAAU,EAkBHG,CAAkBvB,IAE5BmB,IACZxB,OAAOC,WAAY,CAEhBD,OAAOC,WAAW4B,QAAQ9B,GAEdN,GAAA,EACDC,GAAA,EAGhB,IAAA,MAAaI,KAAMgC,EAAc/B,KAAMgC,KAAkBpC,EAGU,mBAAtDK,OAAOC,WAAW6B,GAM5B9B,OAAOC,WAAW6B,MAA6BC,GALtC5B,QAAAuB,MAAM,iCAAiCI,iCAOrD,CACF,MAEQ3B,QAAAC,KACN,sHAGFT,EAAmBqC,KAAK,CAAElC,OAAMC,QASpC,ECxFIkC,EAAgC,IAAIC,MAAM,CAAA,EANa,CAC3DC,IAAA,CAAIC,EAAStC,EAAMuC,IACV,IAAItC,IAAoBH,EAAsBE,KAAmBC"}